(defcfg
  process-unmapped-keys yes
;;linux-dev /dev/input/by-path/platform-i8042-serio-0-event-kbd
  linux-dev /dev/input/by-id/usb-HOLDCHIP_USB_Gaming_Keyboard-event-kbd
)

(defsrc
  1    2    3    4    5    6    7    8    9    0
  q    w    e    r    t    y    u    i    o    p
  a    s    d    f    g    h    j    k    l    ;
  102d z    x    c    v    n    m    ,    .    /
  lalt spc  ralt
)

(defvar
  idle-time  20
  tap-time   200
  hold-time  280
  left-hand-keys (
     1    2    3    4    5
     q    w    e    r    t
     a    s    d    f    g
     102d z    x    c    v
     lalt spc  ralt
  )
  right-hand-keys (
     6    7    8    9    0
     y    u    i    o    p
     h    j    k    l    ;
     n    m    ,    .    /
     lalt spc  ralt
  )
)

(deflayer base
  1    2    3    4    5    6    7    8    9    0
  q    w    f    p    b    j    l    u    y    ;
  @a   @r   @s   @t   g    m    @n   @e   @i   @o
  z    x    c    d    v    k    h    ,    .    /
  @sft @nav @sym
)

(deflayer base-nomods
  1    2    3    4    5    6    7    8    9    0
  q    w    f    p    b    j    l    u    y    ;
  a    r    s    t    g    m    n    e    i    o
  z    x    c    d    v    k    h    ,    .    /
  bspc spc  ret
)

(defvirtualkeys
  to-base (layer-switch base)
)

(defalias
  tap (multi (layer-switch base-nomods) (on-idle $idle-time tap-virtualkey to-base))
  ;; Layer switch
  sft (tap-hold-press $tap-time $hold-time bspc lsft)
  nav (tap-hold-press $tap-time $hold-time spc (layer-toggle nav))
  sym (tap-hold-press $tap-time $hold-time ret (layer-while-held symbols))
  ;; Homerow modifiers
  a (tap-hold-release-keys $tap-time $hold-time (multi a @tap) lmet $left-hand-keys)
  r (tap-hold-release-keys $tap-time $hold-time (multi r @tap) lalt $left-hand-keys)
  s (tap-hold-release-keys $tap-time $hold-time (multi s @tap) lctl $left-hand-keys)
  t (tap-hold-release-keys $tap-time $hold-time (multi t @tap) lsft $left-hand-keys)
  n (tap-hold-release-keys $tap-time $hold-time (multi n @tap) rsft $right-hand-keys)
  e (tap-hold-release-keys $tap-time $hold-time (multi e @tap) rctl $right-hand-keys)
  i (tap-hold-release-keys $tap-time $hold-time (multi i @tap) ralt $right-hand-keys)
  o (tap-hold-release-keys $tap-time $hold-time (multi o @tap) rmet $right-hand-keys)
)

(deflayer nav
  M-1  M-2  M-3  M-4  M-5  M-6  M-7  M-8  M-9  M-0
  esc  @cls bck  fwd  XX   home pgdn pgup end  bspc
  lmet lalt lctl lsft XX   lft  down up   rght XX
  @ndo @cut @cpy @pst XX   @mwl @mwd @mwu @mwr XX
  del  _    ret
)

(defalias
  ;; Shortcuts
  all C-a
  sav C-s
  cls C-w
  ndo C-z
  cut C-x
  cpy C-c
  pst C-v
  ;; Mouse wheel emulation
  mwu (mwheel-up    50 120)
  mwd (mwheel-down  50 120)
  mwl (mwheel-left  50 120)
  mwr (mwheel-right 50 120)
)

(deflayer symbols
  _    _    _    _    _    _    _    _    _    _
  S-2  S-,  S-.  S-4  S-5  S-6  S-7  S-8  '    `
  S-[  S-9  S-0  S-]  =    \    S-=  -    /    S-'
  S-`  [    ]    S--  S-3  S-\  S-1  ;    S-;  S-/
  _    _    _
)

;; (deflayer symbolsv2
;;   _    _    _    _    _    _    _    _    _    _
;;   1    2    3    4    5    6    7    8    9    0
;;   _    [    (    {    _    _    }    )    ]    _
;;   S-`  [    ]    S--  S-3  S-\  S-1  ;    S-;  S-/
;;   _    _    _
;; ) 

;; vim set ft=lisp
